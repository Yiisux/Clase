---------------------MI PRIMER API----------------
1- proyecto emplty
2- instalar "npm install -g express-generator-api" (si ya esta instalado no hay que hacerlo más)
3- creamos el start en run- runcofiguration - new, cambiamos de run a start y al final del todo le damos a los 3 puntos
	y creamos un debug nuevo llamado "DEBUG" y el nombre del proyecto terminado en :*

4- añadimos dependencias moongose y morgan

5- sustituimos los var de "require" y el "express" en el app por const, juntamos todas y damos control+r , en la primera linea
	ponemos var y en la 2º const y pulsamos con remplace all

6- añadimos morgan "const logger = require("morgan"); //para realizar el loggin de la aplicacion" (//para realizar el loggin de la aplicacion)

7- añadimos "app.use(logger("dev"));" (//para inicializar el loggin)

8- creamos una carpeta llamada "models"

9- creamos los modelos añadiendo  "const mongoose = required('mongoose');
					const Schema = mongoose.Schema;"

10- añadimos la linea de exportar el modelo "module.exports = mongoose.model('Nota', notaSchema);"

11- añadimos la linea "mongoose.connect('mongodb://192.168.99.100:27017/keeper',  { useMongoClient: true });"

12- añadimos la linea "mongoose.Promise = global.Promise;"

13- con docker start mongoJesus iniciamos la bbdd

14- en la carpeta routes creamos un js llamado notas que va a manegar las rutas de notas

15- implementamos el express y el router "const express = require('express');
						let router = express.Router();"

16- aqui podemos ver metodos de res. (http://expressjs.com/es/guide/routing.html)
---------------------------FORMA QUE NO USAREMOS------------------------------------
17- creamos la ruta para las notas de esta maneraa:
	"router.get('/', (req, res) => {
  	  res.status(200).json([{titulo: 'Saludos invocador', descripcion: 'Hola mundo'}]);
	});"

NOTA: ESTO NO LO HACEMOS ASÍ REALMENTE YA QUE LOS DATOS LOS METEREMOS DESDE OTRO LADO
-------------------------------------------------------------------------------------
18- exportamos el router con "exports.module = router;"

19- vamos al app.js y añadimos la ruta de la carpeta controladora y su ruta:
	"const notas = require('./routes/notas');"
	"app.use('/api/v1/notas', notas);"

20- creamos una carpeta llamada controller y añadimos notas.js

21- añadimos los const y el método para mostrar todas las notas que hay en nuestra bbdd

const Nota = require('../models/notas');

module.exports.findAllNotas = (req, res) => {
  Nota.find((err, notas) => {
     if (err) res.status(500).jsonp({error: 500, mensaje: `${err.mensaje}`});

     res.status(200).jsonp(notas);
  });
};

22- nos vamos a notas.js de router y añadimos el const de nuestro controlador de notas "const notasController = require('../controller/notas');"

23- ponemos la ruta "router.get('/',notasController.findAllNotas(req, res));"

24- en el enrutador de notas creamos un metodo get para buscar por id "router.get('/:id', notasController.findById);"
module.exports.findById = (req, res) => {
    Nota.findById(req.params.id, (err, nota) => {
        if (err) res.status(404).json({error: 404, mensaje: "No existe una nota con ese ID"});

        res.status(200).jsonp(nota);
    });
};

25- creamos el metodo añadir nota
module.exports.addNota = (req, res) => {
    let nuevaNota = new Nota({
        titulo: req.body.titulo,
        descripcion: req.body.descripcion
    });
    nuevaNota.save(function(err, nota){
        if (err) res.status(500).jsonp({error: 500, mensaje: `${err.mensaje}`});

        res.status(201).jsonp(nota);
    })
};

26- ponemos la ruta en el router
"router.get('/:id', notasController.findById);
router.post('/', notasController.addNota);"


27- hacemos lo mismo con los métodos crud que faltan ejemplo editar:
module.exports.editNota = (req, res) => {
    Nota.findById(req.params.id, (err, nota) => {
     nota.titulo = req.body.titulo;
     nota.descripcion = req.body.descripcion;

     nota.save((err) => {
         if (err) res.status(500).jsonp({error: 500, mensaje: `${err.mensaje}`});

         res.status(200).jsonp(nota);
     });
  });
};

28- creamos en el modelo "users" 
29- el email lo ponemos que sea unico y que lo transforme a lowercase y la contraseña select false
const userSchema = new Schema({
    email: {type: String, unique: true, lowercase: true},
    displayName: String,
    avatar: String,
    password: {type: String, select: false},
    singupDate: {type: Date, defaul: Date.now()},
    lastLogin: Date
});

30- añadimos 2 librerias mas tanto en la clase users como en el packaje


const bcrypt = require('bcrypt-nodejs');
const crypto = require('crypto');

pero en elpackaje.json solo añadimos el bcrypt


31- codigo final de user models
userSchema.pre('save', function (next) {
        let user = this;

        if (user.isModified('email')) {
            const md5 = crypto.createHash('md5').update(user.email).digest('hex');

            user.avatar = `https://gravatar.com/avatar/${md5}?s=200&d=retro`
        }
        if (user.isModified('password')) return next();

        bcrypt.genSalt(10, (err, salt) => {
        if (err) return next();

        bcrypt.hash(user.password, salt, null, (err, hash) => {
           if (err) return next();

           user.password = hash;
           next();
        });
    });
});


32- controlador de user


33- dependencias json
  "dependencies": {
    "bcrypt-nodejs": "0.0.3",
    "body-parser": "~1.13.2",
    "cookie-parser": "~1.3.5",
    "crypto": "^1.0.1",
    "express": "~4.13.1",
    "mongoose": "^4.13.5",
    "morgan": "^1.9.0",
    "jwt-simple": "^0.5.1",
    "moment": "^2.19.3"

34- creamos archivo de configuracion config.js con el siguiente codigo
module.exports {
    SECRET_TOKEN: 'tokenJesus'
}

35- creamos carpeta middlewares y dentro el archivo auth.js

36- creamos el singIn







